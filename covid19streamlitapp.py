# -*- coding: utf-8 -*-
"""Covid19streamlitapp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19vkK_2sVlBz1CLbTZOQDUn3QqaxhW78D

###Importing the libraries
"""

!pip install seaborn
!pip install matplotlib
!pip install pandas
!pip install streamlit

import pandas as pd 
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt

"""###Importing Covid-19 dataset"""

covid19 = pd.read_csv('/content/covid19_Confirmed_dataset.csv')
covid19.head(15)

"""###Check the shape of the dataframe"""

covid19.shape

columns = covid19.columns
columns

"""###Delete useless columns"""

covid19.drop(["Lat",
                        "Long"],
                        axis=1,
                        #default value, annotation axis=0 which is equal to rows
                        inplace = True   
                        )
covid19.head(10)

"""###Aggregating the rows by the country"""

covid19_aggregated = covid19.groupby("Country/Region").sum()
covid19_aggregated.head()

covid19_aggregated.shape
#we have 187 countries, 100 dates

"""###Visualizing data related to a country for example Greece

"""

covid19_aggregated.loc["Greece"]

"""###Calculating a good measure"""

covid19_aggregated.loc['Greece'].plot()
#will plot the values on different date

covid19_aggregated.loc['Greece'].plot()
covid19_aggregated.loc['Italy'].plot()
covid19_aggregated.loc['Spain'].plot()
plt.legend()

"""####Spread of the virus in Greece for the first 50 dates only"""

covid19_aggregated.loc['Greece'][:50].plot()

"""###Calculating the first derivative of the curve"""

covid19_aggregated.loc["Greece"].diff().plot()

"""###Maxmimum infection rate for Greece"""

covid19_aggregated.loc["Greece"].diff().max()

"""###Maximum infection rate for all of the countries"""

countries = list(covid19_aggregated.index)
max_infection_rates = []
for c in countries :
    max_infection_rates.append(covid19_aggregated.loc[c].diff().max())
max_infection_rates

covid19_aggregated["max_infection_rates"] = max_infection_rates
covid19_aggregated.head()

"""###New dataframe with only needed column"""

covid19_data = pd.DataFrame(covid19_aggregated["max_infection_rates"])
covid19_data.head(10)

"""###Importing the happiness dataset"""

happiness_report = pd.read_csv('/content/worldwide_happiness_report.csv')
happiness_report.head(10)

"""###Drop the useless columns"""

useless_cols = ["Overall rank", "Score", "Generosity", "Perceptions of corruption"]
happiness_report.drop(useless_cols, axis=1, inplace=True)
happiness_report.head(10)

"""###Changing the indices of the dataframe"""

happiness_report.set_index("Country or region", inplace=True)
happiness_report.head(10)

"""###Join datasets"""

data = covid19_data.join(happiness_report,
                how = "inner"    #method/type of join
                )
data.head()

"""###Correlation Matrix"""

data.corr()

"""###Plotting GDP vs maximum Infection rate"""

x = data["GDP per capita"]
y = data["max_infection_rates"]
sns.scatterplot(x,y)

#We can see the values need different scaling

#Will apply log scaling to y
x = data["GDP per capita"]
y = data["max_infection_rates"]
sns.scatterplot(x,np.log(y))

#RegPlot
x = data["GDP per capita"]
y = data["max_infection_rates"]

sns.regplot(x,np.log(y))

"""###Plotting Healthy life expectancy vs maximum Infection rate"""

x = data["Healthy life expectancy"]
y = data["max_infection_rates"]

sns.scatterplot(x,np.log(y))

x = data["Healthy life expectancy"]
y = data["max_infection_rates"]

sns.regplot(x,np.log(y))

"""###Plotting Freedom to make life choices vs maximum Infection rate"""

x = data["Freedom to make life choices"]
y = data["max_infection_rates"]

sns.scatterplot(x,np.log(y))

x = data["Freedom to make life choices"]
y = data["max_infection_rates"]

sns.regplot(x,np.log(y))